<launch>

  <!-- Wheel Encoder Tick Publisher Using Arduino -->  
  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  <!-- Subscribe: /cmd_vel -->
  <!-- Publish: /right_ticks, /left_ticks -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="115200"/>
  </node>

  <!-- IMU Data Publisher Using the BNO055 IMU Sensor -->
  <!-- Publish: /imu/data -->
  <node ns="imu" name="imu_node" pkg="imu_bno055" type="bno055_i2c_node" respawn="true" respawn_delay="2">
    <param name="device" type="string" value="/dev/i2c-1"/>
    <param name="address" type="int" value="40"/> <!-- 0x28 == 40 is the default for BNO055 -->
    <param name="frame_id" type="string" value="imu"/>
  </node>

  <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
  <!-- Publish: /scan -->
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
    <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
    <!--param name="serial_baudrate"  type="int"    value="256000"--><!--A3 -->
    <param name="frame_id"            type="string" value="laser"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
  </node>  

  <!-- Map File -->
  <arg name="map_file" default="$(find navigation_data_pub)/maps/kitchen_2.yaml"/>

  <!-- Map Server -->
  <!-- Publish: /map -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom_broadcaster" args="0 0 0 0 0 0 map odom 20" />
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

  <!-- Costmap File -->
  <!-- Subscribe: /map -->
  <!-- Publish: /costmap_2d/costmap/costmap -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 base_footprint base_link 20" />
  <node pkg="navigation_data_pub" type="tf_odom_to_base" name="tf_odom_to_base">
  </node>
  <rosparam file="$(find navigation_data_pub)/param/minimal_costmap1.yaml" command="load" ns="/costmap_2d/costmap" />
  <node pkg="costmap_2d" type="costmap_2d_node" name="costmap_2d" output="screen" />

  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
  <?ignore
  <node pkg="rviz" type="rviz" name="rviz" args="-d /home/automaticaddison/catkin_ws/src/jetson_nano_bot/launch_jetson_nano_bot/launch/display_origin_axis.rviz">
  </node>  
  ?> 
  <node pkg="rviz" type="rviz" name="rviz" args="-d /home/automaticaddison/catkin_ws/src/jetson_nano_bot/launch_jetson_nano_bot/launch/kitchen2_costmap.rviz">
  </node> 
  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node>   

  <!-- Odometry Publisher -->
  <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
  <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
  </node> 

  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="imu/data" />
  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0 0 0 0 0 base_link imu 20" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>

  <!-- A* Path Planner -->
  <!-- Subscribe: /costmap, /goal_2d -->
  <!-- Publish: /waypoint_2d, /path -->
  <remap from="costmap" to="costmap_2d/costmap/costmap" />
  <node pkg="navigation_data_pub" type="path_planner_a_star" name="path_planner_a_star" output="screen">
  </node>
	
  <!-- Drive Controller -->
  <!-- Subscribe: /robot_pose_ekf/odom_combined, /waypoint_2d -->
  <!-- Publish: /cmd_vel -->
  <?ignore
  <remap from="waypoint_2d" to="goal_2d" />
  ?>
  <node pkg="navigation_data_pub" type="ekf_drive_controller" name="ekf_drive_controller">
  </node> 
	
</launch>
